Grammar

    0 $accept: lines $end

    1 lines: lines line
    2      | line

    3 line: EXIT
    4     | expr '\n'
    5     | LETTER '=' expr '\n'
    6     | bexpr '\n'
    7     | IF bexpr THEN expr ELSE expr '\n'

    8 bexpr: expr MEQUAL expr
    9      | expr GEQUAL expr
   10      | expr '<' expr
   11      | expr '>' expr
   12      | expr EQUAL expr
   13      | expr NOTEQUAL expr
   14      | '(' bexpr ')'
   15      | BOOLEAN

   16 expr: expr '+' expr
   17     | expr '-' expr
   18     | expr '*' expr
   19     | expr '/' expr
   20     | expr '%' expr
   21     | '-' expr
   22     | '(' expr ')'
   23     | INTEGER
   24     | LETTER


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 4 5 6 7
    '%' (37) 20
    '(' (40) 14 22
    ')' (41) 14 22
    '*' (42) 18
    '+' (43) 16
    '-' (45) 17 21
    '/' (47) 19
    '<' (60) 10
    '=' (61) 5
    '>' (62) 11
    error (256)
    INTEGER <number> (258) 23
    LETTER <letter> (259) 5 24
    BOOLEAN <boolean> (260) 15
    EQUAL (261) 12
    NOTEQUAL (262) 13
    MEQUAL (263) 8
    GEQUAL (264) 9
    IF (265) 7
    THEN (266) 7
    ELSE (267) 7
    EXIT (268) 3


Nonterminals, with rules where they appear

    $accept (25)
        on left: 0
    lines (26)
        on left: 1 2
        on right: 0 1
    line <number> (27)
        on left: 3 4 5 6 7
        on right: 1 2
    bexpr <boolean> (28)
        on left: 8 9 10 11 12 13 14 15
        on right: 6 7 14
    expr <number> (29)
        on left: 16 17 18 19 20 21 22 23 24
        on right: 4 5 7 8 9 10 11 12 13 16 17 18 19 20 21 22


State 0

    0 $accept: . lines $end

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    '-'      shift, and go to state 6
    '('      shift, and go to state 7

    lines  go to state 8
    line   go to state 9
    bexpr  go to state 10
    expr   go to state 11


State 1

   23 expr: INTEGER .

    $default  reduce using rule 23 (expr)


State 2

    5 line: LETTER . '=' expr '\n'
   24 expr: LETTER .

    '='  shift, and go to state 12

    $default  reduce using rule 24 (expr)


State 3

   15 bexpr: BOOLEAN .

    $default  reduce using rule 15 (bexpr)


State 4

    7 line: IF . bexpr THEN expr ELSE expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    BOOLEAN  shift, and go to state 3
    '-'      shift, and go to state 6
    '('      shift, and go to state 7

    bexpr  go to state 14
    expr   go to state 15


State 5

    3 line: EXIT .

    $default  reduce using rule 3 (line)


State 6

   21 expr: '-' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 17


State 7

   14 bexpr: '(' . bexpr ')'
   22 expr: '(' . expr ')'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    BOOLEAN  shift, and go to state 3
    '-'      shift, and go to state 6
    '('      shift, and go to state 7

    bexpr  go to state 18
    expr   go to state 19


State 8

    0 $accept: lines . $end
    1 lines: lines . line

    $end     shift, and go to state 20
    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    '-'      shift, and go to state 6
    '('      shift, and go to state 7

    line   go to state 21
    bexpr  go to state 10
    expr   go to state 11


State 9

    2 lines: line .

    $default  reduce using rule 2 (lines)


State 10

    6 line: bexpr . '\n'

    '\n'  shift, and go to state 22


State 11

    4 line: expr . '\n'
    8 bexpr: expr . MEQUAL expr
    9      | expr . GEQUAL expr
   10      | expr . '<' expr
   11      | expr . '>' expr
   12      | expr . EQUAL expr
   13      | expr . NOTEQUAL expr
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    EQUAL     shift, and go to state 23
    NOTEQUAL  shift, and go to state 24
    MEQUAL    shift, and go to state 25
    GEQUAL    shift, and go to state 26
    '+'       shift, and go to state 27
    '-'       shift, and go to state 28
    '*'       shift, and go to state 29
    '/'       shift, and go to state 30
    '%'       shift, and go to state 31
    '\n'      shift, and go to state 32
    '<'       shift, and go to state 33
    '>'       shift, and go to state 34


State 12

    5 line: LETTER '=' . expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 35


State 13

   24 expr: LETTER .

    $default  reduce using rule 24 (expr)


State 14

    7 line: IF bexpr . THEN expr ELSE expr '\n'

    THEN  shift, and go to state 36


State 15

    8 bexpr: expr . MEQUAL expr
    9      | expr . GEQUAL expr
   10      | expr . '<' expr
   11      | expr . '>' expr
   12      | expr . EQUAL expr
   13      | expr . NOTEQUAL expr
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    EQUAL     shift, and go to state 23
    NOTEQUAL  shift, and go to state 24
    MEQUAL    shift, and go to state 25
    GEQUAL    shift, and go to state 26
    '+'       shift, and go to state 27
    '-'       shift, and go to state 28
    '*'       shift, and go to state 29
    '/'       shift, and go to state 30
    '%'       shift, and go to state 31
    '<'       shift, and go to state 33
    '>'       shift, and go to state 34


State 16

   22 expr: '(' . expr ')'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 37


State 17

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr
   21     | '-' expr .

    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 21 (expr)


State 18

   14 bexpr: '(' bexpr . ')'

    ')'  shift, and go to state 38


State 19

    8 bexpr: expr . MEQUAL expr
    9      | expr . GEQUAL expr
   10      | expr . '<' expr
   11      | expr . '>' expr
   12      | expr . EQUAL expr
   13      | expr . NOTEQUAL expr
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr
   22     | '(' expr . ')'

    EQUAL     shift, and go to state 23
    NOTEQUAL  shift, and go to state 24
    MEQUAL    shift, and go to state 25
    GEQUAL    shift, and go to state 26
    '+'       shift, and go to state 27
    '-'       shift, and go to state 28
    '*'       shift, and go to state 29
    '/'       shift, and go to state 30
    '%'       shift, and go to state 31
    ')'       shift, and go to state 39
    '<'       shift, and go to state 33
    '>'       shift, and go to state 34


State 20

    0 $accept: lines $end .

    $default  accept


State 21

    1 lines: lines line .

    $default  reduce using rule 1 (lines)


State 22

    6 line: bexpr '\n' .

    $default  reduce using rule 6 (line)


State 23

   12 bexpr: expr EQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 40


State 24

   13 bexpr: expr NOTEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 41


State 25

    8 bexpr: expr MEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 42


State 26

    9 bexpr: expr GEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 43


State 27

   16 expr: expr '+' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 44


State 28

   17 expr: expr '-' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 45


State 29

   18 expr: expr '*' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 46


State 30

   19 expr: expr '/' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 47


State 31

   20 expr: expr '%' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 48


State 32

    4 line: expr '\n' .

    $default  reduce using rule 4 (line)


State 33

   10 bexpr: expr '<' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 49


State 34

   11 bexpr: expr '>' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 50


State 35

    5 line: LETTER '=' expr . '\n'
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'   shift, and go to state 27
    '-'   shift, and go to state 28
    '*'   shift, and go to state 29
    '/'   shift, and go to state 30
    '%'   shift, and go to state 31
    '\n'  shift, and go to state 51


State 36

    7 line: IF bexpr THEN . expr ELSE expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 52


State 37

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr
   22     | '(' expr . ')'

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31
    ')'  shift, and go to state 39


State 38

   14 bexpr: '(' bexpr ')' .

    $default  reduce using rule 14 (bexpr)


State 39

   22 expr: '(' expr ')' .

    $default  reduce using rule 22 (expr)


State 40

   12 bexpr: expr EQUAL expr .
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 12 (bexpr)


State 41

   13 bexpr: expr NOTEQUAL expr .
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 13 (bexpr)


State 42

    8 bexpr: expr MEQUAL expr .
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 8 (bexpr)


State 43

    9 bexpr: expr GEQUAL expr .
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 9 (bexpr)


State 44

   16 expr: expr . '+' expr
   16     | expr '+' expr .
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 16 (expr)


State 45

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   17     | expr '-' expr .
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 17 (expr)


State 46

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   18     | expr '*' expr .
   19     | expr . '/' expr
   20     | expr . '%' expr

    $default  reduce using rule 18 (expr)


State 47

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   19     | expr '/' expr .
   20     | expr . '%' expr

    $default  reduce using rule 19 (expr)


State 48

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr
   20     | expr '%' expr .

    $default  reduce using rule 20 (expr)


State 49

   10 bexpr: expr '<' expr .
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 10 (bexpr)


State 50

   11 bexpr: expr '>' expr .
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    '%'  shift, and go to state 31

    $default  reduce using rule 11 (bexpr)


State 51

    5 line: LETTER '=' expr '\n' .

    $default  reduce using rule 5 (line)


State 52

    7 line: IF bexpr THEN expr . ELSE expr '\n'
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    ELSE  shift, and go to state 53
    '+'   shift, and go to state 27
    '-'   shift, and go to state 28
    '*'   shift, and go to state 29
    '/'   shift, and go to state 30
    '%'   shift, and go to state 31


State 53

    7 line: IF bexpr THEN expr ELSE . expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 13
    '-'      shift, and go to state 6
    '('      shift, and go to state 16

    expr  go to state 54


State 54

    7 line: IF bexpr THEN expr ELSE expr . '\n'
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '%' expr

    '+'   shift, and go to state 27
    '-'   shift, and go to state 28
    '*'   shift, and go to state 29
    '/'   shift, and go to state 30
    '%'   shift, and go to state 31
    '\n'  shift, and go to state 55


State 55

    7 line: IF bexpr THEN expr ELSE expr '\n' .

    $default  reduce using rule 7 (line)
