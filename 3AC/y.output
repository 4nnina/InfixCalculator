Terminals unused in grammar

    '^'


Grammar

    0 $accept: lines $end

    1 lines: lines line
    2      | line

    3 line: EXIT
    4     | PRINTLETTER
    5     | expr '\n'

    6 $@1: %empty

    7 line: ASSIGNMENT $@1

    8 $@2: %empty

    9 line: ASSIGNMENTLETT $@2
   10     | LETTER '=' expr '\n'
   11     | bexpr '\n'

   12 $@3: %empty

   13 $@4: %empty

   14 line: IF bexpr $@3 THEN expr ELSE $@4 expr '\n'

   15 bexpr: expr MEQUAL expr
   16      | expr GEQUAL expr
   17      | expr '<' expr
   18      | expr '>' expr
   19      | expr EQUAL expr
   20      | expr NOTEQUAL expr
   21      | '(' bexpr ')'
   22      | BOOLEAN

   23 expr: expr '+' expr
   24     | expr '-' expr
   25     | expr '*' expr
   26     | expr '/' expr
   27     | expr '%' expr
   28     | '(' expr ')'
   29     | INTEGER
   30     | LETTER


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 5 10 11 14
    '%' (37) 27
    '(' (40) 21 28
    ')' (41) 21 28
    '*' (42) 25
    '+' (43) 23
    '-' (45) 24
    '/' (47) 26
    '<' (60) 17
    '=' (61) 10
    '>' (62) 18
    '^' (94)
    error (256)
    INTEGER <number> (258) 29
    LETTER <letter> (259) 10 30
    PRINTLETTER <letter> (260) 4
    BOOLEAN <boolean> (261) 22
    ASSIGNMENT <str> (262) 7
    ASSIGNMENTLETT <str> (263) 9
    EQUAL (264) 19
    NOTEQUAL (265) 20
    MEQUAL (266) 15
    GEQUAL (267) 16
    IF (268) 14
    THEN (269) 14
    ELSE (270) 14
    EXIT (271) 3


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    lines (30)
        on left: 1 2
        on right: 0 1
    line <produzione> (31)
        on left: 3 4 5 7 9 10 11 14
        on right: 1 2
    $@1 (32)
        on left: 6
        on right: 7
    $@2 (33)
        on left: 8
        on right: 9
    $@3 (34)
        on left: 12
        on right: 14
    $@4 (35)
        on left: 13
        on right: 14
    bexpr <produzione> (36)
        on left: 15 16 17 18 19 20 21 22
        on right: 11 14 21
    expr <produzione> (37)
        on left: 23 24 25 26 27 28 29 30
        on right: 5 10 14 15 16 17 18 19 20 23 24 25 26 27 28


State 0

    0 $accept: . lines $end

    INTEGER         shift, and go to state 1
    LETTER          shift, and go to state 2
    PRINTLETTER     shift, and go to state 3
    BOOLEAN         shift, and go to state 4
    ASSIGNMENT      shift, and go to state 5
    ASSIGNMENTLETT  shift, and go to state 6
    IF              shift, and go to state 7
    EXIT            shift, and go to state 8
    '('             shift, and go to state 9

    lines  go to state 10
    line   go to state 11
    bexpr  go to state 12
    expr   go to state 13


State 1

   29 expr: INTEGER .

    $default  reduce using rule 29 (expr)


State 2

   10 line: LETTER . '=' expr '\n'
   30 expr: LETTER .

    '='  shift, and go to state 14

    $default  reduce using rule 30 (expr)


State 3

    4 line: PRINTLETTER .

    $default  reduce using rule 4 (line)


State 4

   22 bexpr: BOOLEAN .

    $default  reduce using rule 22 (bexpr)


State 5

    7 line: ASSIGNMENT . $@1

    $default  reduce using rule 6 ($@1)

    $@1  go to state 15


State 6

    9 line: ASSIGNMENTLETT . $@2

    $default  reduce using rule 8 ($@2)

    $@2  go to state 16


State 7

   14 line: IF . bexpr $@3 THEN expr ELSE $@4 expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    BOOLEAN  shift, and go to state 4
    '('      shift, and go to state 9

    bexpr  go to state 18
    expr   go to state 19


State 8

    3 line: EXIT .

    $default  reduce using rule 3 (line)


State 9

   21 bexpr: '(' . bexpr ')'
   28 expr: '(' . expr ')'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    BOOLEAN  shift, and go to state 4
    '('      shift, and go to state 9

    bexpr  go to state 20
    expr   go to state 21


State 10

    0 $accept: lines . $end
    1 lines: lines . line

    $end            shift, and go to state 22
    INTEGER         shift, and go to state 1
    LETTER          shift, and go to state 2
    PRINTLETTER     shift, and go to state 3
    BOOLEAN         shift, and go to state 4
    ASSIGNMENT      shift, and go to state 5
    ASSIGNMENTLETT  shift, and go to state 6
    IF              shift, and go to state 7
    EXIT            shift, and go to state 8
    '('             shift, and go to state 9

    line   go to state 23
    bexpr  go to state 12
    expr   go to state 13


State 11

    2 lines: line .

    $default  reduce using rule 2 (lines)


State 12

   11 line: bexpr . '\n'

    '\n'  shift, and go to state 24


State 13

    5 line: expr . '\n'
   15 bexpr: expr . MEQUAL expr
   16      | expr . GEQUAL expr
   17      | expr . '<' expr
   18      | expr . '>' expr
   19      | expr . EQUAL expr
   20      | expr . NOTEQUAL expr
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    EQUAL     shift, and go to state 25
    NOTEQUAL  shift, and go to state 26
    MEQUAL    shift, and go to state 27
    GEQUAL    shift, and go to state 28
    '+'       shift, and go to state 29
    '-'       shift, and go to state 30
    '*'       shift, and go to state 31
    '/'       shift, and go to state 32
    '%'       shift, and go to state 33
    '\n'      shift, and go to state 34
    '<'       shift, and go to state 35
    '>'       shift, and go to state 36


State 14

   10 line: LETTER '=' . expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 38


State 15

    7 line: ASSIGNMENT $@1 .

    $default  reduce using rule 7 (line)


State 16

    9 line: ASSIGNMENTLETT $@2 .

    $default  reduce using rule 9 (line)


State 17

   30 expr: LETTER .

    $default  reduce using rule 30 (expr)


State 18

   14 line: IF bexpr . $@3 THEN expr ELSE $@4 expr '\n'

    $default  reduce using rule 12 ($@3)

    $@3  go to state 39


State 19

   15 bexpr: expr . MEQUAL expr
   16      | expr . GEQUAL expr
   17      | expr . '<' expr
   18      | expr . '>' expr
   19      | expr . EQUAL expr
   20      | expr . NOTEQUAL expr
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    EQUAL     shift, and go to state 25
    NOTEQUAL  shift, and go to state 26
    MEQUAL    shift, and go to state 27
    GEQUAL    shift, and go to state 28
    '+'       shift, and go to state 29
    '-'       shift, and go to state 30
    '*'       shift, and go to state 31
    '/'       shift, and go to state 32
    '%'       shift, and go to state 33
    '<'       shift, and go to state 35
    '>'       shift, and go to state 36


State 20

   21 bexpr: '(' bexpr . ')'

    ')'  shift, and go to state 40


State 21

   15 bexpr: expr . MEQUAL expr
   16      | expr . GEQUAL expr
   17      | expr . '<' expr
   18      | expr . '>' expr
   19      | expr . EQUAL expr
   20      | expr . NOTEQUAL expr
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | '(' expr . ')'

    EQUAL     shift, and go to state 25
    NOTEQUAL  shift, and go to state 26
    MEQUAL    shift, and go to state 27
    GEQUAL    shift, and go to state 28
    '+'       shift, and go to state 29
    '-'       shift, and go to state 30
    '*'       shift, and go to state 31
    '/'       shift, and go to state 32
    '%'       shift, and go to state 33
    ')'       shift, and go to state 41
    '<'       shift, and go to state 35
    '>'       shift, and go to state 36


State 22

    0 $accept: lines $end .

    $default  accept


State 23

    1 lines: lines line .

    $default  reduce using rule 1 (lines)


State 24

   11 line: bexpr '\n' .

    $default  reduce using rule 11 (line)


State 25

   19 bexpr: expr EQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 42


State 26

   20 bexpr: expr NOTEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 43


State 27

   15 bexpr: expr MEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 44


State 28

   16 bexpr: expr GEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 45


State 29

   23 expr: expr '+' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 46


State 30

   24 expr: expr '-' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 47


State 31

   25 expr: expr '*' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 48


State 32

   26 expr: expr '/' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 49


State 33

   27 expr: expr '%' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 50


State 34

    5 line: expr '\n' .

    $default  reduce using rule 5 (line)


State 35

   17 bexpr: expr '<' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 51


State 36

   18 bexpr: expr '>' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 52


State 37

   28 expr: '(' . expr ')'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 53


State 38

   10 line: LETTER '=' expr . '\n'
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'   shift, and go to state 29
    '-'   shift, and go to state 30
    '*'   shift, and go to state 31
    '/'   shift, and go to state 32
    '%'   shift, and go to state 33
    '\n'  shift, and go to state 54


State 39

   14 line: IF bexpr $@3 . THEN expr ELSE $@4 expr '\n'

    THEN  shift, and go to state 55


State 40

   21 bexpr: '(' bexpr ')' .

    $default  reduce using rule 21 (bexpr)


State 41

   28 expr: '(' expr ')' .

    $default  reduce using rule 28 (expr)


State 42

   19 bexpr: expr EQUAL expr .
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 19 (bexpr)


State 43

   20 bexpr: expr NOTEQUAL expr .
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 20 (bexpr)


State 44

   15 bexpr: expr MEQUAL expr .
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 15 (bexpr)


State 45

   16 bexpr: expr GEQUAL expr .
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 16 (bexpr)


State 46

   23 expr: expr . '+' expr
   23     | expr '+' expr .
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 23 (expr)


State 47

   23 expr: expr . '+' expr
   24     | expr . '-' expr
   24     | expr '-' expr .
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 24 (expr)


State 48

   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   25     | expr '*' expr .
   26     | expr . '/' expr
   27     | expr . '%' expr

    $default  reduce using rule 25 (expr)


State 49

   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   26     | expr '/' expr .
   27     | expr . '%' expr

    $default  reduce using rule 26 (expr)


State 50

   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   27     | expr '%' expr .

    $default  reduce using rule 27 (expr)


State 51

   17 bexpr: expr '<' expr .
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 17 (bexpr)


State 52

   18 bexpr: expr '>' expr .
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33

    $default  reduce using rule 18 (bexpr)


State 53

   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr
   28     | '(' expr . ')'

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    '/'  shift, and go to state 32
    '%'  shift, and go to state 33
    ')'  shift, and go to state 41


State 54

   10 line: LETTER '=' expr '\n' .

    $default  reduce using rule 10 (line)


State 55

   14 line: IF bexpr $@3 THEN . expr ELSE $@4 expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 56


State 56

   14 line: IF bexpr $@3 THEN expr . ELSE $@4 expr '\n'
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    ELSE  shift, and go to state 57
    '+'   shift, and go to state 29
    '-'   shift, and go to state 30
    '*'   shift, and go to state 31
    '/'   shift, and go to state 32
    '%'   shift, and go to state 33


State 57

   14 line: IF bexpr $@3 THEN expr ELSE . $@4 expr '\n'

    $default  reduce using rule 13 ($@4)

    $@4  go to state 58


State 58

   14 line: IF bexpr $@3 THEN expr ELSE $@4 . expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 17
    '('      shift, and go to state 37

    expr  go to state 59


State 59

   14 line: IF bexpr $@3 THEN expr ELSE $@4 expr . '\n'
   23 expr: expr . '+' expr
   24     | expr . '-' expr
   25     | expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '%' expr

    '+'   shift, and go to state 29
    '-'   shift, and go to state 30
    '*'   shift, and go to state 31
    '/'   shift, and go to state 32
    '%'   shift, and go to state 33
    '\n'  shift, and go to state 60


State 60

   14 line: IF bexpr $@3 THEN expr ELSE $@4 expr '\n' .

    $default  reduce using rule 14 (line)
