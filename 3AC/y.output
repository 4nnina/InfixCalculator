Terminals unused in grammar

    '^'


Grammar

    0 $accept: lines $end

    1 lines: lines line
    2      | line

    3 line: EXIT
    4     | expr '\n'

    5 $@1: %empty

    6 $@2: %empty

    7 line: LETTER '=' $@1 expr $@2 '\n'
    8     | bexpr '\n'

    9 $@3: %empty

   10 $@4: %empty

   11 line: IF bexpr $@3 THEN expr ELSE $@4 expr '\n'

   12 bexpr: expr MEQUAL expr
   13      | expr GEQUAL expr
   14      | expr '<' expr
   15      | expr '>' expr
   16      | expr EQUAL expr
   17      | expr NOTEQUAL expr
   18      | '(' bexpr ')'
   19      | BOOLEAN

   20 expr: expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '%' expr
   25     | '(' expr ')'
   26     | INTEGER
   27     | LETTER


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 4 7 8 11
    '%' (37) 24
    '(' (40) 18 25
    ')' (41) 18 25
    '*' (42) 22
    '+' (43) 20
    '-' (45) 21
    '/' (47) 23
    '<' (60) 14
    '=' (61) 7
    '>' (62) 15
    '^' (94)
    error (256)
    INTEGER <number> (258) 26
    LETTER <letter> (259) 7 27
    BOOLEAN <boolean> (260) 19
    EQUAL (261) 16
    NOTEQUAL (262) 17
    MEQUAL (263) 12
    GEQUAL (264) 13
    IF (265) 11
    THEN (266) 11
    ELSE (267) 11
    EXIT (268) 3


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    lines (27)
        on left: 1 2
        on right: 0 1
    line <number> (28)
        on left: 3 4 7 8 11
        on right: 1 2
    $@1 (29)
        on left: 5
        on right: 7
    $@2 (30)
        on left: 6
        on right: 7
    $@3 (31)
        on left: 9
        on right: 11
    $@4 (32)
        on left: 10
        on right: 11
    bexpr <boolean> (33)
        on left: 12 13 14 15 16 17 18 19
        on right: 8 11 18
    expr <number> (34)
        on left: 20 21 22 23 24 25 26 27
        on right: 4 7 11 12 13 14 15 16 17 20 21 22 23 24 25


State 0

    0 $accept: . lines $end

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    '('      shift, and go to state 6

    lines  go to state 7
    line   go to state 8
    bexpr  go to state 9
    expr   go to state 10


State 1

   26 expr: INTEGER .

    $default  reduce using rule 26 (expr)


State 2

    7 line: LETTER . '=' $@1 expr $@2 '\n'
   27 expr: LETTER .

    '='  shift, and go to state 11

    $default  reduce using rule 27 (expr)


State 3

   19 bexpr: BOOLEAN .

    $default  reduce using rule 19 (bexpr)


State 4

   11 line: IF . bexpr $@3 THEN expr ELSE $@4 expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    BOOLEAN  shift, and go to state 3
    '('      shift, and go to state 6

    bexpr  go to state 13
    expr   go to state 14


State 5

    3 line: EXIT .

    $default  reduce using rule 3 (line)


State 6

   18 bexpr: '(' . bexpr ')'
   25 expr: '(' . expr ')'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    BOOLEAN  shift, and go to state 3
    '('      shift, and go to state 6

    bexpr  go to state 15
    expr   go to state 16


State 7

    0 $accept: lines . $end
    1 lines: lines . line

    $end     shift, and go to state 17
    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    '('      shift, and go to state 6

    line   go to state 18
    bexpr  go to state 9
    expr   go to state 10


State 8

    2 lines: line .

    $default  reduce using rule 2 (lines)


State 9

    8 line: bexpr . '\n'

    '\n'  shift, and go to state 19


State 10

    4 line: expr . '\n'
   12 bexpr: expr . MEQUAL expr
   13      | expr . GEQUAL expr
   14      | expr . '<' expr
   15      | expr . '>' expr
   16      | expr . EQUAL expr
   17      | expr . NOTEQUAL expr
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    EQUAL     shift, and go to state 20
    NOTEQUAL  shift, and go to state 21
    MEQUAL    shift, and go to state 22
    GEQUAL    shift, and go to state 23
    '+'       shift, and go to state 24
    '-'       shift, and go to state 25
    '*'       shift, and go to state 26
    '/'       shift, and go to state 27
    '%'       shift, and go to state 28
    '\n'      shift, and go to state 29
    '<'       shift, and go to state 30
    '>'       shift, and go to state 31


State 11

    7 line: LETTER '=' . $@1 expr $@2 '\n'

    $default  reduce using rule 5 ($@1)

    $@1  go to state 32


State 12

   27 expr: LETTER .

    $default  reduce using rule 27 (expr)


State 13

   11 line: IF bexpr . $@3 THEN expr ELSE $@4 expr '\n'

    $default  reduce using rule 9 ($@3)

    $@3  go to state 33


State 14

   12 bexpr: expr . MEQUAL expr
   13      | expr . GEQUAL expr
   14      | expr . '<' expr
   15      | expr . '>' expr
   16      | expr . EQUAL expr
   17      | expr . NOTEQUAL expr
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    EQUAL     shift, and go to state 20
    NOTEQUAL  shift, and go to state 21
    MEQUAL    shift, and go to state 22
    GEQUAL    shift, and go to state 23
    '+'       shift, and go to state 24
    '-'       shift, and go to state 25
    '*'       shift, and go to state 26
    '/'       shift, and go to state 27
    '%'       shift, and go to state 28
    '<'       shift, and go to state 30
    '>'       shift, and go to state 31


State 15

   18 bexpr: '(' bexpr . ')'

    ')'  shift, and go to state 34


State 16

   12 bexpr: expr . MEQUAL expr
   13      | expr . GEQUAL expr
   14      | expr . '<' expr
   15      | expr . '>' expr
   16      | expr . EQUAL expr
   17      | expr . NOTEQUAL expr
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   25     | '(' expr . ')'

    EQUAL     shift, and go to state 20
    NOTEQUAL  shift, and go to state 21
    MEQUAL    shift, and go to state 22
    GEQUAL    shift, and go to state 23
    '+'       shift, and go to state 24
    '-'       shift, and go to state 25
    '*'       shift, and go to state 26
    '/'       shift, and go to state 27
    '%'       shift, and go to state 28
    ')'       shift, and go to state 35
    '<'       shift, and go to state 30
    '>'       shift, and go to state 31


State 17

    0 $accept: lines $end .

    $default  accept


State 18

    1 lines: lines line .

    $default  reduce using rule 1 (lines)


State 19

    8 line: bexpr '\n' .

    $default  reduce using rule 8 (line)


State 20

   16 bexpr: expr EQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 37


State 21

   17 bexpr: expr NOTEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 38


State 22

   12 bexpr: expr MEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 39


State 23

   13 bexpr: expr GEQUAL . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 40


State 24

   20 expr: expr '+' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 41


State 25

   21 expr: expr '-' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 42


State 26

   22 expr: expr '*' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 43


State 27

   23 expr: expr '/' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 44


State 28

   24 expr: expr '%' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 45


State 29

    4 line: expr '\n' .

    $default  reduce using rule 4 (line)


State 30

   14 bexpr: expr '<' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 46


State 31

   15 bexpr: expr '>' . expr

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 47


State 32

    7 line: LETTER '=' $@1 . expr $@2 '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 48


State 33

   11 line: IF bexpr $@3 . THEN expr ELSE $@4 expr '\n'

    THEN  shift, and go to state 49


State 34

   18 bexpr: '(' bexpr ')' .

    $default  reduce using rule 18 (bexpr)


State 35

   25 expr: '(' expr ')' .

    $default  reduce using rule 25 (expr)


State 36

   25 expr: '(' . expr ')'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 50


State 37

   16 bexpr: expr EQUAL expr .
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 16 (bexpr)


State 38

   17 bexpr: expr NOTEQUAL expr .
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 17 (bexpr)


State 39

   12 bexpr: expr MEQUAL expr .
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 12 (bexpr)


State 40

   13 bexpr: expr GEQUAL expr .
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 13 (bexpr)


State 41

   20 expr: expr . '+' expr
   20     | expr '+' expr .
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 20 (expr)


State 42

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 21 (expr)


State 43

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '%' expr

    $default  reduce using rule 22 (expr)


State 44

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '%' expr

    $default  reduce using rule 23 (expr)


State 45

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   24     | expr '%' expr .

    $default  reduce using rule 24 (expr)


State 46

   14 bexpr: expr '<' expr .
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 14 (bexpr)


State 47

   15 bexpr: expr '>' expr .
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 15 (bexpr)


State 48

    7 line: LETTER '=' $@1 expr . $@2 '\n'
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28

    $default  reduce using rule 6 ($@2)

    $@2  go to state 51


State 49

   11 line: IF bexpr $@3 THEN . expr ELSE $@4 expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 52


State 50

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   25     | '(' expr . ')'

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    '%'  shift, and go to state 28
    ')'  shift, and go to state 35


State 51

    7 line: LETTER '=' $@1 expr $@2 . '\n'

    '\n'  shift, and go to state 53


State 52

   11 line: IF bexpr $@3 THEN expr . ELSE $@4 expr '\n'
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    ELSE  shift, and go to state 54
    '+'   shift, and go to state 24
    '-'   shift, and go to state 25
    '*'   shift, and go to state 26
    '/'   shift, and go to state 27
    '%'   shift, and go to state 28


State 53

    7 line: LETTER '=' $@1 expr $@2 '\n' .

    $default  reduce using rule 7 (line)


State 54

   11 line: IF bexpr $@3 THEN expr ELSE . $@4 expr '\n'

    $default  reduce using rule 10 ($@4)

    $@4  go to state 55


State 55

   11 line: IF bexpr $@3 THEN expr ELSE $@4 . expr '\n'

    INTEGER  shift, and go to state 1
    LETTER   shift, and go to state 12
    '('      shift, and go to state 36

    expr  go to state 56


State 56

   11 line: IF bexpr $@3 THEN expr ELSE $@4 expr . '\n'
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'   shift, and go to state 24
    '-'   shift, and go to state 25
    '*'   shift, and go to state 26
    '/'   shift, and go to state 27
    '%'   shift, and go to state 28
    '\n'  shift, and go to state 57


State 57

   11 line: IF bexpr $@3 THEN expr ELSE $@4 expr '\n' .

    $default  reduce using rule 11 (line)
